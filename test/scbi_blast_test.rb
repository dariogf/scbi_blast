require 'test_helper'

class ScbiBlastTest < MiniTest::Unit::TestCase #Minitest::Test
  def test_that_it_has_a_version_number
    refute_nil ::ScbiBlast::VERSION
  end

  
  def test_blast
    puts "TEST BLAST"
    
    blast=BatchBlast.new('-db ~/progs/ruby/DB/formatted/mids.fasta -task blastn-short')

    seqs=[">GFIJCBT03F4XVR","ACGCGTCTAGTGACTACACGACGACCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTNTTTTTNTTTTATTTTATTTTATTTATTATATATATATATATATATATATATATANNNNCNCACACANACACNNGAGNGNGNGNGAGNGAGNGAGTAGTAGTAGTAGTGTATATATACTACTACTACTACTACACACGACGACGTACGTACGTACGTACGTACGTACGTACGTACGTAACGTAAGTAAGTAGTAGTAGTAGTAGTAGTAGTAGTAGTAGTAGTAGTATATATATATATAGTAGTAGTAGTAGTAGTAGTAGTACGTACGTACGTACGTACGTACGTACGTACGACGACGACGACGACGACGACGACGAGATATATACTACTAACTAACTAACAACGTACGACGACGACGACGACGACGTACGTACGTACGTACGTACGTACTACTACTACTACGTACGTACGTACGTACGTACGTACGTACGTAGTAGTAGTAGTACGTACGTACGTCGTCGTCGTCGTCGTCGTCGTCGTACGTACGACGACGACGAGAGNGNGNNNNNNNNNNNN",">GFIJCBT03G3M1I","GACTACACGACGACTTTATTTATTATTTATTTATTTATTTATTTATTTATTTATTTATTTATTTTATTTTATTTTATTTTTATTTTTATTTTTATTTTTATTTTTTATTTTTTATTTTTTATTTTTTATTTTTTTATTTTTTTATTTTTTTATTTTTTTATTTTTTTTATTTTTTTTATTTTTTTTATTTTTTTTATTTTTTTTATTTTTTTTTATTTTTTTTTATTTTTTTTTAGTTTTTTTTTAGTTTTTTTTTAGTTTTTTTTTTAGTTTTTTTTTTAGTTTTTTTTTTAGTTTTTTTTTTTAGTTTTTTTTTTTAGTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTACGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTTACGTTTTTTTTTTTTACGTTTTTTTTTTTTTACGTTTTTTTTTTTTTAGTTTTTTTTTTTTTACGTTTTTTTTTTTTACGTTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTTTTTTTTNNNNNNNN"]
    
    res=blast.do_blast(seqs,:table, true, '/tmp/file.output')
    
    puts res.inspect
  end
  
  def test_blast_outfile
    puts "TEST BLAST OUTFILE"
    blast=BatchBlast.new('-db ~/progs/ruby/DB/formatted/mids.fasta -task blastn-short')

    seqs=[">GFIJCBT03F4XVR","ACGCGTCTAGTGACTACACGACGACCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTNTTTTTNTTTTATTTTATTTTATTTATTATATATATATATATATATATATATATANNNNCNCACACANACACNNGAGNGNGNGNGAGNGAGNGAGTAGTAGTAGTAGTGTATATATACTACTACTACTACTACACACGACGACGTACGTACGTACGTACGTACGTACGTACGTACGTAACGTAAGTAAGTAGTAGTAGTAGTAGTAGTAGTAGTAGTAGTAGTAGTATATATATATATAGTAGTAGTAGTAGTAGTAGTAGTACGTACGTACGTACGTACGTACGTACGTACGACGACGACGACGACGACGACGACGAGATATATACTACTAACTAACTAACAACGTACGACGACGACGACGACGACGTACGTACGTACGTACGTACGTACTACTACTACTACGTACGTACGTACGTACGTACGTACGTACGTAGTAGTAGTAGTACGTACGTACGTCGTCGTCGTCGTCGTCGTCGTCGTACGTACGACGACGACGAGAGNGNGNNNNNNNNNNNN",">GFIJCBT03G3M1I","GACTACACGACGACTTTATTTATTATTTATTTATTTATTTATTTATTTATTTATTTATTTATTTTATTTTATTTTATTTTTATTTTTATTTTTATTTTTATTTTTTATTTTTTATTTTTTATTTTTTATTTTTTTATTTTTTTATTTTTTTATTTTTTTATTTTTTTTATTTTTTTTATTTTTTTTATTTTTTTTATTTTTTTTATTTTTTTTTATTTTTTTTTATTTTTTTTTAGTTTTTTTTTAGTTTTTTTTTAGTTTTTTTTTTAGTTTTTTTTTTAGTTTTTTTTTTAGTTTTTTTTTTTAGTTTTTTTTTTTAGTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTACGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTTACGTTTTTTTTTTTTACGTTTTTTTTTTTTTACGTTTTTTTTTTTTTAGTTTTTTTTTTTTTACGTTTTTTTTTTTTACGTTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTTTTTTTTNNNNNNNN"]
    
    res=blast.do_blast(seqs,:table,true,'/tmp/blast.txt')
    puts "="*30
    puts res.inspect
    
    
  end

  def test_blast_outfile_pipe
    puts "TEST BLAST OUTFILE"
    blast=BatchBlast.new('-db ~/progs/ruby/DB/formatted/mids.fasta -task blastn-short')

    seqs=[">GFIJCBT03F4XVR","ACGCGTCTAGTGACTACACGACGACCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTNTTTTTNTTTTATTTTATTTTATTTATTATATATATATATATATATATATATATANNNNCNCACACANACACNNGAGNGNGNGNGAGNGAGNGAGTAGTAGTAGTAGTGTATATATACTACTACTACTACTACACACGACGACGTACGTACGTACGTACGTACGTACGTACGTACGTAACGTAAGTAAGTAGTAGTAGTAGTAGTAGTAGTAGTAGTAGTAGTAGTATATATATATATAGTAGTAGTAGTAGTAGTAGTAGTACGTACGTACGTACGTACGTACGTACGTACGACGACGACGACGACGACGACGACGAGATATATACTACTAACTAACTAACAACGTACGACGACGACGACGACGACGTACGTACGTACGTACGTACGTACTACTACTACTACGTACGTACGTACGTACGTACGTACGTACGTAGTAGTAGTAGTACGTACGTACGTCGTCGTCGTCGTCGTCGTCGTCGTACGTACGACGACGACGAGAGNGNGNNNNNNNNNNNN",">GFIJCBT03G3M1I","GACTACACGACGACTTTATTTATTATTTATTTATTTATTTATTTATTTATTTATTTATTTATTTTATTTTATTTTATTTTTATTTTTATTTTTATTTTTATTTTTTATTTTTTATTTTTTATTTTTTATTTTTTTATTTTTTTATTTTTTTATTTTTTTATTTTTTTTATTTTTTTTATTTTTTTTATTTTTTTTATTTTTTTTATTTTTTTTTATTTTTTTTTATTTTTTTTTAGTTTTTTTTTAGTTTTTTTTTAGTTTTTTTTTTAGTTTTTTTTTTAGTTTTTTTTTTAGTTTTTTTTTTTAGTTTTTTTTTTTAGTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTACGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTTACGTTTTTTTTTTTTACGTTTTTTTTTTTTTACGTTTTTTTTTTTTTAGTTTTTTTTTTTTTACGTTTTTTTTTTTTACGTTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTTTTTTTTNNNNNNNN"]
    
    res=blast.do_blast(seqs,:table,true,'/tmp/blast.txt',true)
    puts "="*30
    puts res.inspect
    
    
  end
  
  
  
  def test_querys
    res = BlastSimplexmlResult.new(File.join(File.dirname(__FILE__),'blast.xml'))   
    # puts "BLAST.XML"
    # puts res.inspect
    assert_equal(2,res.querys.count)
    assert_equal(2,res.querys[0].hits.count)
    assert_equal(2,res.querys[1].hits.count)
    
  end

  def test_streamxml
    file='blast.xml'
    
    resStream = BlastStreamxmlResult.new(File.join(File.dirname(__FILE__),file))
    resSimple = BlastSimplexmlResult.new(File.join(File.dirname(__FILE__),file))
    
    # res = BlastStreamxmlResult.new(File.join(File.dirname(__FILE__),'db_1.xml'))
    # puts "BLAST.XML"
    # puts res.inspect
    assert_equal(2,resStream.querys.count)
    assert_equal(2,resStream.querys[0].hits.count)
    assert_equal(2,resStream.querys[1].hits.count)
    
    assert(resStream.compare?(resSimple))
    
    resStream.querys.each_with_index do |q,i|
      q2=resSimple.querys[i]
      
      q.hits.each_with_index do |h,i2|
        h2=q2.hits[i2]
        assert(h.compare?(h2),"Hits not equal: #{h.inspect},#{h2.inspect}")
      end
      
      assert_equal(q.query_id,q2.query_id)
      assert_equal(q.query_def,q2.query_def)
      assert_equal(q.full_query_length , q2.full_query_length)
      
      assert(q.compare?(q2),"Query not equal: #{q.inspect},#{q2.inspect}")
      
    end
    
  end
  
  def test_hits
    assert true
  end
  
  def test_empty_blast
  	  res = BlastSimplexmlResult.new(File.join(File.dirname(__FILE__),'empty_blast.xml'))  	
      # puts "EMPTY_BLAST.XML"
      # puts res.inspect
  		assert_equal(1,res.querys.count)
  		assert_equal(0,res.querys[0].hits.count)
  	
  end

  def test_empty_results
  	  res = BlastSimplexmlResult.new('')  	
      # puts "EMPTY_RESULTS.XML"
      # puts res.inspect
  		assert_equal(0,res.querys.count)
  	
  end

  def test_table_result_with_empty_querys
  	  res = BlastTableResult.new(File.join(File.dirname(__FILE__),'sp_blast_result.txt'))
      # puts "TABLE RESULTS.XML"
      # puts res.inspect
      assert_equal(4,res.querys.count)
      assert_equal(0,res.querys[2].hits.count)
      assert_equal('RL1',res.querys[0].hits[0].subject_id)
      assert_equal('dos',res.querys[1].query_id)
      assert_equal('tres',res.querys[2].query_id)
      # res.querys.each do |q|
      #   puts q.query_id
      # end
      
  	
  end

  def test_good_table
  	  res = BlastTableResult.new(File.join(File.dirname(__FILE__),'table.txt'))

      assert_equal(999,res.querys.count)
      
  	
  end

  def test_good_table_sin_c
      res = BlastTableResult.new(File.join(File.dirname(__FILE__),'table_sin_c.txt'))
      # the rest of querys up to 999 are empty
      assert_equal(391,res.querys.count)
      
    
  end


  def test_bad_table
      assert_raises RuntimeError do
  	    BlastTableResult.new(File.join(File.dirname(__FILE__),'bad_table.txt'))
      end
  	
  end


  def test_dust
    dust_masker=DustMasker.new()
    
    seqs=[]
    
    # seqs.push ">name"
    # seqs.push 'ATATACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTAACTAACTAACTAACTAACTAACTAACTAACTAACGTAACGTAACTAACTAACGTAACTAACTAACTAACGTAACGTAACGTAACGTAACGTAACGTAACGTAACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGGTACGTACGTACGTACGTACGACGACGACGAGAGAGAGAGNGNNNactacgactacgatcgATATACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTACTAACTAACTAACTAACTAACTAACTAACTAACTAACGTAACGTAACTAACTAACGTAACTAACTAACTAACGTAACGTAACGTAACGTAACGTAACGTAACGTAACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGTACGGTACGTACGTACGTACGTACGACGACGACGAGAGAGAGAGNGNNN'
    
    seqs=[">GFIJCBT03F4XVR","GACTACACGACGACCTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTNTTTTTNTTTTATTTTATTTTATTTATTATATATATATATATATATATATATATANNNNCNCACACANACACNNGAGNGNGNGNGAGNGAGNGAGTAGTAGTAGTAGTGTATATATACTACTACTACTACTACACACGACGACGTACGTACGTACGTACGTACGTACGTACGTACGTAACGTAAGTAAGTAGTAGTAGTAGTAGTAGTAGTAGTAGTAGTAGTAGTATATATATATATAGTAGTAGTAGTAGTAGTAGTAGTACGTACGTACGTACGTACGTACGTACGTACGACGACGACGACGACGACGACGACGAGATATATACTACTAACTAACTAACAACGTACGACGACGACGACGACGACGTACGTACGTACGTACGTACGTACTACTACTACTACGTACGTACGTACGTACGTACGTACGTACGTAGTAGTAGTAGTACGTACGTACGTCGTCGTCGTCGTCGTCGTCGTCGTACGTACGACGACGACGAGAGNGNGNNNNNNNNNNNN",">GFIJCBT03G3M1I","GACTACACGACGACTTTATTTATTATTTATTTATTTATTTATTTATTTATTTATTTATTTATTTTATTTTATTTTATTTTTATTTTTATTTTTATTTTTATTTTTTATTTTTTATTTTTTATTTTTTATTTTTTTATTTTTTTATTTTTTTATTTTTTTATTTTTTTTATTTTTTTTATTTTTTTTATTTTTTTTATTTTTTTTATTTTTTTTTATTTTTTTTTATTTTTTTTTAGTTTTTTTTTAGTTTTTTTTTAGTTTTTTTTTTAGTTTTTTTTTTAGTTTTTTTTTTAGTTTTTTTTTTTAGTTTTTTTTTTTAGTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTACGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTTACGTTTTTTTTTTTTACGTTTTTTTTTTTTTACGTTTTTTTTTTTTTAGTTTTTTTTTTTTTACGTTTTTTTTTTTTACGTTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTACGTTTTTTTTTTTTAGTTTTTTTTTTTTAGTTTTTTTTTTTTTTTTTTTNNNNNNNN"]
    
    res = dust_masker.do_dust(seqs.join("\n"))
    # puts res.to_json
    assert_equal(res.count,2)
    assert_equal(res[0].dust.count,4)
    assert_equal(res[0].query_id,'GFIJCBT03F4XVR')
    
    assert_equal(res[0].dust[0][0],15)
    assert_equal(res[0].dust[0][1],99)
    assert_equal(res[0].dust[1][0],118)
    assert_equal(res[0].dust[1][1],139)
    
    
    assert_equal(res[1].dust[0][0],14)
    assert_equal(res[1].dust[0][1],961)
    
    
  end


  def test_no_dust
    dust_masker=DustMasker.new()
    seqs=[]
    
    seqs.push ">name"
    seqs.push 'actggtacgacgtacaccagtactacgatcgtacgtacggatcgatcgatcgttagtgtacgtacgttgtacgtactgac'
    
    res = dust_masker.do_dust(seqs.join("\n"))
    assert_equal(res.count,1)
    assert_equal(res[0].query_id,'name')    
    assert_equal(res[0].dust.count,0)
    
  end
  
  def test_empty_dust
    dust_masker=DustMasker.new()
    seqs=[]
    
    # seqs.push ">name"
    # seqs.push 'actggtacgacgtacaccagtactacgatcgtacgtacggatcgatcgatcgttagtgtacgtacgttgtacgtactgac'
    
    res = dust_masker.do_dust(seqs.join("\n"))
    assert_equal(res.count,0)

    res = dust_masker.do_dust(nil)
    assert_equal(res.count,0)

    
  end

  def test_dust_fail
    dust_masker=DustMasker.new()
    seqs=[]    
    seqs.push ">name"
    # seqs.push 'actggtacgacgtacaccagtactacgatcgtacgtacggatcgatcgatcgttagtgtacgtacgttgtacgtactgac'
    
    assert_raises(RuntimeError) {
    	res = dust_masker.do_dust(seqs)
    	assert_equal(res.count,0)
	}
    
  end

  def test_dust_bad_fasta
    dust_masker=DustMasker.new()
    # seqs=[]    
    # seqs.push ">name"
    # seqs.push 'actggtacgacgtacaccagtactacgatcgtacgtacggatcgatcgatcgttagtgtacgtacgttgtacgtactgac'
    
    assert_raises(RuntimeError) {
      dust_masker.do_dust("name")
    }
    
  end
  
end
